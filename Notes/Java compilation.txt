Compilers catch mistakes in our code and transform the code into an executable manner
The compilation process in Java takes place in a different manner
As we have already discussed the compilation of Java takes place in 2 steps 
first -> to compile => javac filename.java
then -> to run the code => java filename

This accounts for the meaning that the file written in the .java extension is transformed to byte code and then in runs in the JVM
A successful compilation will produce a .class file!
An unsuccessful file produces an error

Here is an example :
  we have  a .java file called helloworld.java 
  which when compiled gives another file called helloworld.class -> successful compilation
  If any mistake occurs then the file will show some error

In java each class is a real world task


from JDK 1.8 java programs can be compiled with this single command -> java filename.java

A file can have multiple classes but only one should be public
Number of byte codes is dependent on the number of classes 

$ sign is not recommened to write class name as when we use nested class compiler uses $ symbol


ex: //generates 2 byte code 

file name -> Hello.java
byte code -> Hello.class,  Hello$World.class

public class Hello {
  class world{

  }
} 

if compiler(lexical analyzer at time of tokenizing ) sees //, /*, */ /**. **/ -> removes these lines


there are 6 phases of compiler 
lexical analyzer  -> Buffering[storage],tokenizing[split the code in diffrent chunks]
Syntax analyzer
Semantic analyzer
Intermediate code generation
Code Optimization
Code generation